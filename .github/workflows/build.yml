name: 构建

on:
  push:
    tags:
      - v*
  workflow_dispatch:
    inputs:
      build_type:
        description: "构建类型"
        required: true
        default: "Debug"
        type: choice
        options:
          - "Release"
          - "Nightly"
          - "Debug"
      release_version:
        description: "发布版本号(仅发布版本有效)"
        required: false
        type: string
      is_signing:
        description: "是否签名"
        required: false
        default: false
        type: boolean
      win32_x64:
        description: "win32-x64"
        required: false
        type: boolean
        default: true
      win32_x86:
        description: "win32-x86"
        required: false
        type: boolean
        default: true
      # win32_arm64:
      #   description: "win32-arm64"
      #   required: false
      #   type: boolean
      #   default: false
      # macos_x64:
      #   description: "macos-x64"
      #   required: false
      #   type: boolean
      #   default: true
      macos_arm64:
        description: "macos-arm64"
        required: false
        type: boolean
        default: true
      linux_x64:
        description: "linux-x64"
        required: false
        type: boolean
        default: true
  workflow_call:
    inputs:
      build_type:
        description: "构建类型 (Release/Nightly/Debug)"
        required: false
        default: "Debug"
        type: string
      release_version:
        description: "发布版本号(仅发布版本有效)"
        required: false
        type: string
      is_signing:
        description: "是否签名"
        required: false
        default: false
        type: boolean
      win32_x64:
        description: "win32-x64"
        required: false
        type: boolean
        default: true
      win32_x86:
        description: "win32-x86"
        required: false
        type: boolean
        default: true
      # win32_arm64:
      #   description: "win32-arm64"
      #   required: false
      #   type: boolean
      #   default: false
      # macos_x64:
      #   description: "macos-x64"
      #   required: false
      #   type: boolean
      #   default: true
      macos_arm64:
        description: "macos-arm64"
        required: false
        type: boolean
        default: true
      linux_x64:
        description: "linux-x64"
        required: false
        type: boolean
        default: true
    outputs:
      run_id:
        description: "构建运行ID"
        value: ${{ jobs.prepare.outputs.build_runid }}
      package_count:
        description: "打包文件数量"
        value: ${{ jobs.package.outputs.package-count }}
      package_result:
        description: "打包作业结果"
        value: ${{ jobs.package.result }}
  pull_request:
    types: [opened, synchronize, closed]
    paths-ignore:
      - "**/*.md"
      - "**/*.txt"
      - "docs/**"
      - "Scripts/**"
      - ".gitignore"
      - ".gitattributes"
      - ".github/ISSUE_TEMPLATE/**"
      - ".github/DISCUSSION_TEMPLATE/**"
      - ".github/PULL_REQUEST_TEMPLATE*"

concurrency:
  group: build-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write
  attestations: write
  pull-requests: read

jobs:
  prepare:
    name: Update Info
    runs-on: ubuntu-latest
    outputs:
      build_type: ${{ steps.build-info.outputs.build_type }}
      build_time: ${{ steps.build-info.outputs.build_time }}
      build_commit: ${{ steps.build-info.outputs.build_commit }}
      build_branch: ${{ steps.build-info.outputs.build_branch }}
      build_runid: ${{ steps.build-info.outputs.build_runid }}
      release_version: ${{ steps.build-info.outputs.release_version }}
      skip_ci: ${{ steps.check-skip-ci.outputs.skip_ci }}
      platforms: ${{ steps.build-info.outputs.platforms }}
      platforms_array: ${{ steps.build-info.outputs.platforms_array }}
      matrix: ${{ steps.build-info.outputs.matrix }}
      is_signing: ${{ steps.build-info.outputs.is_signing }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Check Skip CI
        id: check-skip-ci
        shell: bash
        env:
          PR_TITLE: ${{ github.event.pull_request.title || '' }}
        run: |
          skip_ci=false
          commit_sha=""
          commit_message=""
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "$PR_TITLE" =~ [Ss][Kk][Ii][Pp][[:space:]][Cc][Ii] ]]; then
              skip_ci=true
            fi
            if [[ "${{ github.event.action }}" == "synchronize" && "$skip_ci" == "false" ]]; then
              commit_sha="${{ github.event.pull_request.head.sha }}"
              commit_message=$(git log -1 --pretty=%B "$commit_sha")
              if echo "$commit_message" | grep -i -q "skip[[:space:]]*ci"; then
                skip_ci=true
              fi
            fi
          fi
          echo "skip_ci=$skip_ci" >> $GITHUB_OUTPUT
          echo "::group::Commit Message"
          echo "[DEBUG] commit-message: \"$commit_message\" ; sha: $commit_sha ; skip-ci: $skip_ci"
          echo "::endgroup::"
          echo "是否跳过 CI: $skip_ci" >> $GITHUB_STEP_SUMMARY

      - name: Set Build Info
        id: build-info
        if: steps.check-skip-ci.outputs.skip_ci != 'true'
        shell: bash
        env:
          PR_NUMBER: ${{ github.event.pull_request.number || 0 }}
          PR_BRANCH: ${{ github.event.pull_request.head.repo.owner.login || github.repository_owner }}:${{ github.event.pull_request.head.ref || github.ref_name }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
        run: |
          build_time=$(date -u -d "+8 hours" +"%Y-%m-%d %H:%M")
          build_commit="${GITHUB_SHA:0:7}"
          build_branch="${GITHUB_REF_NAME}"
          build_runid="${GITHUB_RUN_ID}"
          # determine build_type
          if [[ -n "${{ inputs.build_type }}" ]]; then
            build_type="${{ inputs.build_type }}"
            echo "[DEBUG] 使用 inputs.build_type: $build_type"
          elif [[ -n "${{ github.event.inputs.build_type }}" ]]; then
            build_type="${{ github.event.inputs.build_type }}"
            echo "[DEBUG] 使用 event.inputs.build_type: $build_type"
          elif [[ "${GITHUB_EVENT_NAME}" == "push" && "${GITHUB_REF}" =~ ^refs/tags/v ]]; then
            build_type="Release"
            echo "[DEBUG] Release 标签推送: $build_type"
          elif [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            build_branch="$PR_BRANCH"
            build_type="Debug (PR-#${PR_NUMBER})"
            echo "[DEBUG] PR 构建: $build_type"
          else
            build_type="Debug"
            echo "[DEBUG] 默认构建类型: $build_type"
          fi
          # release version (if provided via workflow_dispatch/workflow_call)
          release_version="${{ inputs.release_version || github.event.inputs.release_version || '' }}"
          # is_signing flag (normalize various sources)
          is_signing="${{ inputs.is_signing || github.event.inputs.is_signing || false }}"
          # 构建平台数组
          declare -A ALL_PLATFORMS=(
            ["win32-x64"]="${{ inputs.win32_x64 || github.event.inputs.win32_x64 || '' }}"
            ["win32-x86"]="${{ inputs.win32_x86 || github.event.inputs.win32_x86 || '' }}"
            ["macos-arm64"]="${{ inputs.macos_arm64 || github.event.inputs.macos_arm64 || '' }}"
            ["linux-x64"]="${{ inputs.linux_x64 || github.event.inputs.linux_x64 || '' }}"
          )
          declare -a SELECTED_PLATFORMS=()
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            echo "[DEBUG] PR 事件平台: win32-x64, linux-x64, macos-arm64"
            SELECTED_PLATFORMS+=("win32-x64" "linux-x64" "macos-arm64")
          elif [[ "${GITHUB_EVENT_NAME}" == "push" ]]; then
            echo "[DEBUG] push 事件平台: all"
            SELECTED_PLATFORMS+=("win32-x64" "win32-x86" "linux-x64" "macos-arm64")
          fi
          for platform in "${!ALL_PLATFORMS[@]}"; do
            input_val="${ALL_PLATFORMS[$platform]}"
            if [[ "$input_val" == "true" || ( -z "$input_val" && "$GITHUB_EVENT_NAME" != "pull_request" ) ]]; then
              SELECTED_PLATFORMS+=("$platform")
            fi
          done
          # 去重
          declare -A UNIQUE_PLATFORMS
          platforms=""
          for platform in "${SELECTED_PLATFORMS[@]}"; do
            if [[ -z "${UNIQUE_PLATFORMS[$platform]}" ]]; then
              UNIQUE_PLATFORMS[$platform]=1
              platforms="${platforms}${platform},"
            fi
          done
          platforms=${platforms%,}
          echo "[DEBUG] 最终平台列表: $platforms"
          # emit outputs
          echo "release_version=$release_version" >> $GITHUB_OUTPUT
          echo "is_signing=$is_signing" >> $GITHUB_OUTPUT
          echo "build_type=$build_type" >> $GITHUB_OUTPUT
          echo "build_time=$build_time" >> $GITHUB_OUTPUT
          echo "build_commit=$build_commit" >> $GITHUB_OUTPUT
          echo "build_branch=$build_branch" >> $GITHUB_OUTPUT
          echo "build_runid=$build_runid" >> $GITHUB_OUTPUT
          echo "platforms=$platforms" >> $GITHUB_OUTPUT
          # 平台数组矩阵
           declare -A PLATFORM_MAPPING=(
             ["win32-x64"]="{\"os\":\"windows-latest\",\"arch\":\"x64\",\"platform\":\"windows-x64\",\"platform_id\":\"win32-x64\"}"
             ["win32-x86"]="{\"os\":\"windows-latest\",\"arch\":\"x86\",\"platform\":\"windows-x86\",\"platform_id\":\"win32-x86\"}"
             ["macos-arm64"]="{\"os\":\"macos-latest\",\"arch\":\"arm64\",\"platform\":\"macos-arm64\",\"platform_id\":\"macos-arm64\"}"
             ["linux-x64"]="{\"container\":\"debian:12-slim\",\"arch\":\"x64\",\"platform\":\"linux-x64\",\"platform_id\":\"linux-x64\"}"
           )
           platforms_array="[]"
           if [[ -n "$platforms" ]]; then
             IFS=',' read -ra PLATFORM_LIST <<< "$platforms"
             platforms_array="["
             for platform in "${PLATFORM_LIST[@]}"; do
               platforms_array="$platforms_array\"$platform\","
             done
             platforms_array=${platforms_array%,}
             platforms_array="$platforms_array]"
           fi
           echo "platforms_array=$platforms_array" >> $GITHUB_OUTPUT
           # 矩阵json
           matrix_json="{\"include\":[]}"
           if [[ -n "$platforms" ]]; then
             matrix_json="{\"include\":["
             for platform in "${PLATFORM_LIST[@]}"; do
               if [[ -n "${PLATFORM_MAPPING[$platform]}" ]]; then
                 matrix_json="$matrix_json${PLATFORM_MAPPING[$platform]},"
               fi
             done
            matrix_json=${matrix_json%,}
            matrix_json="$matrix_json]}";
          fi
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT

          {
            echo "## 📋 构建信息"
            echo "| 项目 | 值 |"
            echo "|------|----|"
            echo "| ⏰ 构建时间 (UTC+8) | $build_time |"
            echo "| 🔗 提交哈希 | $build_commit |"
            echo "| 🌿 分支 | $build_branch |"
            echo "| 🆔 运行 ID | $build_runid |"
            echo "| 🧪 构建类型 | $build_type |"
            echo "| 🖥️ 构建平台 | $platforms |"
            echo "| 🔐 是否签名 | $is_signing |"
          } >> $GITHUB_STEP_SUMMARY

  build:
    needs: [prepare]
    if: needs.prepare.result == 'success' && needs.prepare.outputs.skip_ci != 'true'
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    container: ${{ matrix.container || null }}
    timeout-minutes: 45
    strategy:
      fail-fast: true
      max-parallel: 4
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    env:
      PYTHON_VERSION: ${{ (startsWith(matrix.os, 'windows') || matrix.container) && '3.8' || '3.11' }}
      BUILD_TYPE: ${{ needs.prepare.outputs.build_type }}
      BUILD_TIME: ${{ needs.prepare.outputs.build_time }}
      BUILD_COMMIT: ${{ needs.prepare.outputs.build_commit }}
      BUILD_BRANCH: ${{ needs.prepare.outputs.build_branch }}
      BUILD_RUNID: ${{ needs.prepare.outputs.build_runid }}
      RELEASE_VERSION: ${{ needs.prepare.outputs.release_version }}
    steps:
      - name: Install dependencies (Linux)
        if: matrix.platform == 'linux-x64'
        shell: bash
        run: |
          apt-get update -qq && apt-get upgrade -y
          apt-get install -y \
            zip unzip wget curl ca-certificates git build-essential pkg-config python3-dev \
            libc6-dev linux-libc-dev libffi-dev libxau-dev libxdmcp-dev libxkbcommon-dev \
            libxcb1-dev libx11-dev libxcb-xkb-dev libxcb-xinerama0 libxinerama1 \
            libxkbcommon-x11-0 libxcomposite-dev libxrender1 libxrandr2 libxext6 \
            libxi6 libxft2 libxft-dev libxcb-shape0-dev libxcb-cursor0 libxcb-randr0 \
            libxcb-keysyms1 libxcb-xfixes0 libxcb-icccm4 libxcb-render-util0 \
            libgl1-mesa-glx libgl1-mesa-dev libglu1-mesa-dev libwayland-client0 \
            libwayland-cursor0 libwayland-egl1 libxcb-image0-dev libxcb-render0-dev \
            libdbus-1-3 libdbus-glib-1-2 libglib2.0-0 libglib2.0-dev libfontconfig1 libfreetype6 \
            libxcb-shm0-dev libxcb-sync-dev x11-utils x11-xserver-utils mesa-utils libasound2 xvfb \
            libnspr4 libxtst6 libnss3 libxdamage1 libxcomposite1 libcups2 libcairo2 libcairo-gobject2 \
            libpango-1.0-0 libgtk-3-0 libgdk-pixbuf2.0-0 libx11-xcb1
          apt-get --fix-broken install -y
          apt-get clean && rm -rf /var/lib/apt/lists/*

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install gettext (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          if ! brew list gettext &>/dev/null; then
            brew install gettext
            brew link --overwrite --force gettext || true
          fi

      - name: Setup Python & uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          activate-environment: true
          enable-cache: true
          prune-cache: false

      - name: Cache Python
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Roaming\uv\python
            ~.local/share/uv/python
          key: ${{ runner.os }}-${{ matrix.arch }}-python${{ env.PYTHON_VERSION }}

      - name: Python Syntax Check
        id: syntax_check
        shell: bash
        continue-on-error: false
        run: |
          python_files=$(find . -name "*.py" -not -path "*/__pycache__/*" -not -path "*/.venv/*" -not -path "*/build/*" -not -path "*/dist/*" | sort)
          total_files=$(echo "$python_files" | wc -l)
          echo "[DEBUG] 发现$total_files个文件"
          has_errors=false
          error_count=0
          error_report="## 🔍 Python 语法检查  \n\n"
          error_report+="**检查时间**: $(date '+%Y-%m-%d %H:%M:%S')  \n"
          error_report+="**Python版本**: $(uvx python --version)  \n"
          error_report+="**操作系统**: ${{ matrix.os }} - ${{ matrix.arch }}  \n"
          error_report+="**检查文件数**: $total_files  \n\n"
          error_report+="---  \n\n"
          for file in $python_files; do
            echo "检查文件: $file"
            if ! uvx python -m py_compile "$file" 2>/dev/null; then
              error_output=$(uvx python -m py_compile "$file" 2>&1 || true)
              echo "::group::Commit Message"
              echo "[DEBUG] ❌ 语法错误: $file"
              echo "[DEBUG] 错误详情: $error_output"
              echo "::endgroup::"
              has_errors=true
              error_count=$((error_count + 1))
              rel_path=$(realpath --relative-to="." "$file")
              error_report+="### 问题 #$error_count: \`$rel_path\`  \n\n"
              error_report+="> [!CAUTION]  \n"
              error_report+="> **错误信息**:  \n"
              error_report+="> \`\`\`  \n"
              formatted_error=$(echo "$error_output" | sed 's/^/> /')
              error_report+="> $formatted_error  \n"
              error_report+="> \`\`\`  \n\n"
              error_report+="---  \n\n"
            fi
          done
          if [ "$has_errors" = true ]; then
            echo "has_syntax_errors=true" >> $GITHUB_OUTPUT
            echo "error_count=$error_count" >> $GITHUB_OUTPUT
            error_report+="### ❌ 发现 **$error_count** 个语法错误"
            echo "$error_report" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "has_syntax_errors=false" >> $GITHUB_OUTPUT
            echo "error_count=0" >> $GITHUB_OUTPUT
          fi

      - name: Update config
        shell: bash
        run: |
          config_path="data/default_config.json"
          config_text=$(cat "$config_path")
          config_text="${config_text//__BUILD_TIME__/$BUILD_TIME}"
          config_text="${config_text//__BUILD_COMMIT__/$BUILD_COMMIT}"
          config_text="${config_text//__BUILD_BRANCH__/$BUILD_BRANCH}"
          config_text="${config_text//__BUILD_RUNID__/$BUILD_RUNID}"
          config_text="${config_text//__BUILD_TYPE__/$BUILD_TYPE}"
          if [[ "$BUILD_TYPE" == "Release" || "$BUILD_TYPE" == "Nightly" ]]; then
            VERSION="${RELEASE_VERSION}"
            config_text="${config_text//__BUILD_VERSION__/$VERSION}"
          fi
          if [[ "$BUILD_TYPE" == "Release" ]]; then
            config_text="${config_text//__BUILD_CHANNEL__/0}"
          else
            config_text="${config_text//__BUILD_CHANNEL__/1}"
          fi
          printf "%s" "$config_text" > "$config_path"

      - name: Update Python
        shell: bash
        continue-on-error: true
        run: |
          uv python upgrade ${{ env.PYTHON_VERSION }}
          uv python update-shell
          echo "$HOME/.local/bin:$PATH" >> $GITHUB_PATH || true
          export PATH="$HOME/.local/bin:$PATH" || true
          echo "::group::Python-Version"
          echo "[DEBUG] uvx-python: $(uvx python --version) | system-python: $(python --version)" || true
          echo "[DEBUG] 已安装的Python:"
          uv python list --only-installed || true
          echo "::endgroup::"

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~\AppData\Local\uv
            .venv
          key: ${{ runner.os }}-${{ matrix.arch }}-python${{ env.PYTHON_VERSION }}-uv-cache-${{ hashFiles('uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-python${{ env.PYTHON_VERSION }}-uv-cache-

      - name: Install dependencies
        shell: bash
        run: |
          uv sync --group package --no-dev
          uv pip install cffi pycparser

      - name: Prepare output directory
        run: |
          mkdir -p packages

      - name: Set environment variables
        shell: bash
        env:
          PR_NUMBER: ${{ github.event.pull_request.number || 0 }}
        run: |
          echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_ENV

      - name: Cleanup .ts
        shell: bash
        run: |
          find ui -name "*.ts" -delete || true
          find view -name "*.ts" -delete || true

      - name: Build Windows (pyinstaller)
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: |
          curl -o zip.exe -L http://www.stahlworks.com/dev/zip.exe
          uv run --no-dev pyinstaller main.py \
            -w \
            -i ./img/favicon.ico \
            -n "ClassWidgets" \
            --contents-directory . \
            --add-data "data:data" \
            --add-data "audio:audio" \
            --add-data "img:img" \
            --add-data "ui:ui" \
            --add-data "font:font" \
            --add-data "view:view" \
            --add-data "i18n/*.qm:i18n" \
            --add-data "LICENSE:." \
            --hidden-import darkdetect \
            --strip \
            --optimize 2

          if [[ "$BUILD_TYPE" == "Release" ]]; then
            zip_name="ClassWidgets-Windows-${{ matrix.arch }}"
          else
            zip_name="Windows-${{ matrix.arch }}_debug-${GITHUB_RUN_ID}"
          fi
          cd dist && mv ClassWidgets "${zip_name}" && ../zip.exe -r -q "../packages/${zip_name}.zip" "${zip_name}"/* && cd ..

      - name: Build macOS (pyinstaller)
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          export MACOSX_DEPLOYMENT_TARGET=11.0
          uv run --no-dev pyinstaller main.py \
            -w \
            -i ./img/favicon.icns \
            -n "Class Widgets" \
            --contents-directory . \
            --add-data "data:data" \
            --add-data "audio:audio" \
            --add-data "img:img" \
            --add-data "ui:ui" \
            --add-data "font:font" \
            --add-data "view:view" \
            --add-data "i18n/*.qm:i18n" \
            --add-data "LICENSE:." \
            --hidden-import darkdetect \
            --strip \
            --optimize 2

          cp -R dist/"Class Widgets.app" .
          if [[ "$BUILD_TYPE" == "Release" ]]; then
            zip_name="ClassWidgets-macOS-${{ matrix.arch }}"
          else
            zip_name="macOS(${{ matrix.arch }})_debug-${GITHUB_RUN_ID}"
          fi
          zip -r -q "packages/${zip_name}.zip" "Class Widgets.app"

      - name: Build Linux (pyinstaller)
        if: matrix.platform == 'linux-x64'
        shell: bash
        run: |
          uv run --no-dev pyinstaller main.py \
            -w \
            -i ./img/favicon.png \
            -n "ClassWidgets" \
            --contents-directory . \
            --add-data "data:data" \
            --add-data "audio:audio" \
            --add-data "img:img" \
            --add-data "ui:ui" \
            --add-data "font:font" \
            --add-data "view:view" \
            --add-data "i18n/*.qm:i18n" \
            --add-data "LICENSE:." \
            --strip \
            --optimize 2

          if [[ "$BUILD_TYPE" == "Release" ]]; then
            zip_name="ClassWidgets-Linux-x64"
          else
            zip_name="Linux-x64_debug-${GITHUB_RUN_ID}"
          fi
          cd dist && mv ClassWidgets "${zip_name}" && zip -r -q "../packages/${zip_name}.zip" "${zip_name}"/* && cd ..

      - name: Test Linux executable (headless)
        if: matrix.platform == 'linux-x64'
        shell: bash
        run: |
          export QT_QPA_PLATFORM=offscreen
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          XVFB_PID=$!
          sleep 2
          cd dist
          if [[ "$BUILD_TYPE" == "Release" ]]; then
            test_dir="ClassWidgets-Linux-x64"
          else
            test_dir="Linux-x64_debug-${GITHUB_RUN_ID}"
          fi
          echo "Testing..."
          timeout 10s ./"${test_dir}"/ClassWidgets || echo "no"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: ./packages

  sign:
    needs: [prepare, build]
    if: needs.prepare.outputs.is_signing == 'true' && needs.build.result == 'success' && needs.prepare.outputs.skip_ci != 'true'
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Sign Windows executable
        id: sign_exe
        uses: ./.github/workflows/sign.yml
        with:
          manifest_artifact: windows-${{ matrix.arch }}-build
          executable_name: ClassWidgets.exe

      - name: Download signed executable
        if: inputs.is_signing == true && steps.sign_exe.outputs.signed_executable_artifact != ''
        uses: actions/download-artifact@v5
        with:
          name: ${{ steps.sign_exe.outputs.signed_executable_artifact }}
          path: ./signed-exe

      - name: Replace executable with signed version
        if: inputs.is_signing == true && steps.sign_exe.outputs.signed_executable_artifact != ''
        shell: bash
        run: |
          if [[ -f "./signed-exe/ClassWidgets.exe" ]]; then
            cp "./signed-exe/ClassWidgets.exe" "dist/ClassWidgets/ClassWidgets.exe"
            echo "[DEBUG] 已签名可执行文件替换成功"
          else
            echo "[ERROR] 未找到已签名的可执行文件"
            exit 1
          fi

      - name: Update WiX Version and ProductCode
        if: needs.prepare.outputs.build_type == 'Release'
        shell: bash
        run: |
          VERSION="${{ needs.prepare.outputs.release_version }}"
          if [[ -z "$VERSION" ]]; then
            VERSION="1.0.0.0"
          fi
          PRODUCT_CODE=$(echo -n "$VERSION" | md5sum | awk '{print $1}')
          PRODUCT_CODE="${PRODUCT_CODE:0:8}-${PRODUCT_CODE:8:4}-${PRODUCT_CODE:12:4}-${PRODUCT_CODE:16:4}-${PRODUCT_CODE:20:12}"
          sed -i "0,/<Product/ s/Id=\"[^\"]*\"/Id=\"$PRODUCT_CODE\"/" installer/ClassWidgets.wxs
          sed -i "s/Version=\"[^\"]*\"/Version=\"$VERSION\"/g" installer/ClassWidgets.wxs
          echo "[DEBUG] Updated WiX version to: $VERSION"
          echo "[DEBUG] Updated ProductCode to: $PRODUCT_CODE"

      - name: Build Windows MSI
        id: build_msi
        if: needs.prepare.outputs.build_type == 'Release'
        uses: utilitywarehouse/ghaction-wix@main
        with:
          wix-project-file: installer/ClassWidgets.wxs
          wix-project-directory: dist/ClassWidgets
          output-directory: packages
          output-name: ClassWidgets-Windows-${{ matrix.arch }}.msi

      - name: Upload MSI for signing
        id: upload_msi
        if: needs.prepare.outputs.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-msi-unsigned
          path: packages/ClassWidgets-Windows-${{ matrix.arch }}.msi

      - name: Sign Windows MSI
        id: sign_msi
        if: needs.prepare.outputs.build_type == 'Release'
        uses: ./.github/workflows/sign.yml
        with:
          manifest_artifact: windows-${{ matrix.arch }}-msi-unsigned
          executable_name: ClassWidgets-Windows-${{ matrix.arch }}.msi

      - name: Upload signed executable
        if: inputs.is_signing == true && steps.sign_exe.outputs.signed_executable_artifact != ''
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-exe-signed
          path: ./signed-exe

      - name: Create signed build package
        if: inputs.is_signing == true && steps.sign_exe.outputs.signed_executable_artifact != ''
        shell: bash
        run: |
          echo "[DEBUG] 创建签名版本的完整 build 包"
          mkdir -p signed-build-temp
          cp -r dist/ClassWidgets/* signed-build-temp/
          cd signed-build-temp
          zip -r "../packages/ClassWidgets-Windows-${{ matrix.arch }}-signed.zip" .
          cd ..

      - name: Upload signed build package
        if: inputs.is_signing == true && steps.sign_exe.outputs.signed_executable_artifact != ''
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-build-signed
          path: packages/ClassWidgets-Windows-${{ matrix.arch }}-signed.zip

      - name: Upload signed MSI
        if: inputs.is_signing == true && needs.prepare.outputs.build_type == 'Release' && steps.sign_msi.outputs.signed_executable_artifact != ''
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-msi-signed
          path: ./signed-msi

      - name: Organize final packages
        shell: bash
        run: |
          mkdir -p final-signed-packages
          echo "[DEBUG] 组织最终签名包"
          if [[ -f "packages/ClassWidgets-Windows-${{ matrix.arch }}.zip" ]]; then
            if [[ "${{ steps.sign_exe.outputs.signed_executable_artifact }}" != "" ]]; then
              echo "[DEBUG] 使用已签名可执行文件重新打包 ZIP"
              cd dist/ClassWidgets
              zip -r "../../final-signed-packages/ClassWidgets-Windows-${{ matrix.arch }}.zip" .
              cd ../..
            fi
          fi
          echo "[DEBUG] 最终包列表:"
          ls -la final-signed-packages/ || echo "无最终包文件"

      - name: Download signed MSI
        if: needs.prepare.outputs.build_type == 'Release' && steps.sign_msi.outputs.signed_executable_artifact != ''
        uses: actions/download-artifact@v5
        with:
          name: ${{ steps.sign_msi.outputs.signed_executable_artifact }}
          path: ./signed-msi

      - name: Add signed MSI to final packages
        if: needs.prepare.outputs.build_type == 'Release' && steps.sign_msi.outputs.signed_executable_artifact != ''
        shell: bash
        run: |
          if [[ -f "./signed-msi/ClassWidgets-Windows-${{ matrix.arch }}.msi" ]]; then
            cp "./signed-msi/ClassWidgets-Windows-${{ matrix.arch }}.msi" "final-signed-packages/"
            echo "[DEBUG] 已签名 MSI 添加到最终包: $(ls -la final-signed-packages/*.msi)"
          else
            echo "[ERROR] 未找到已签名的 MSI 文件"
          fi

      - name: Upload signed packages
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}-signed
          path: final-signed-packages

  package:
    needs: [prepare, build, sign]
    if: always() && (needs.build.result == 'success') && (needs.sign.result == 'success' || needs.sign.result == 'skipped') && (needs.prepare.outputs.build_type== 'Release' || needs.prepare.outputs.build_type== 'Nightly') && needs.prepare.outputs.skip_ci != 'true'
    runs-on: ubuntu-latest
    outputs:
      package-count: ${{ steps.organize.outputs.package-count }}
      build_type: ${{ needs.prepare.outputs.build_type }}
      run_id: ${{ github.run_id }}
    env:
      BUILD_TYPE: ${{ needs.prepare.outputs.build_type }}
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v5
        with:
          path: ./all-artifacts

      - name: Organize and upload packages
        id: organize
        shell: bash
        run: |
          mkdir -p final-packages || { rm -rf final-packages; mkdir final-packages; }
          package_count=0
          run_id="${{ github.run_id }}"
          declare -A platforms=(
            ["windows-x64"]="windows"
            ["windows-x86"]="windows"
            ["macos-arm64"]="macos"
            ["linux-x64"]="linux"
          )

          declare -A artifact_cache
          for artifact_dir in ./all-artifacts/*/; do
            if [[ -d "$artifact_dir" ]]; then
              dir_name=$(basename "$artifact_dir")
              artifact_cache["$dir_name"]="$artifact_dir"
            fi
          done

          process_file() {
            local source_file=$1
            local target_name=$2
            local platform=$3
            local file_type=$4

            if [[ -f "$source_file" ]]; then
              cp -f "$source_file" "final-packages/$target_name"
              package_count=$(($package_count + 1))
              file_size=$(stat -c%s "$source_file" 2>/dev/null || echo "未知")
              file_md5=$(md5sum "$source_file" 2>/dev/null | cut -d' ' -f1 || echo "未知")
              if [[ "$file_size" != "未知" ]]; then
                file_size_mb=$(echo "scale=2; $file_size / 1024 / 1024" | bc 2>/dev/null || echo "未知")
              else
                file_size_mb="未知"
              fi
              echo "[DEBUG] ($platform - $file_type): $target_name, $file_size_mb MB, $file_size bytes, $file_md5"
            else
              echo "[DEBUG] 文件不存在: $source_file"
            fi
          }
          for platform in "${!platforms[@]}"; do
            platform_type="${platforms[$platform]}"

            if [[ "$platform_type" == "windows" ]]; then
              # Windows 平台：优先使用签名版本
              build_signed_key="${platform}-build-signed"
              exe_signed_key="${platform}-exe-signed"
              msi_signed_key="${platform}-msi-signed"
              build_key="${platform}-build"
              # 处理 ZIP 包（优先签名版本）
              if [[ -n "${artifact_cache[$build_signed_key]:-}" ]]; then
                echo "[DEBUG] 使用 ${platform} 签名版本 ZIP"
                for zip_file in "${artifact_cache[$build_signed_key]}"/*.zip; do
                  if [[ -f "$zip_file" ]]; then
                    target_name="ClassWidgets-Windows-${platform#windows-}_${run_id}.zip"
                    process_file "$zip_file" "$target_name" "$platform" "已签名ZIP"
                    break
                  fi
                done
              elif [[ -n "${artifact_cache[$build_key]:-}" ]]; then
                echo "[DEBUG] 使用 ${platform} 构建版本 ZIP"
                for zip_file in "${artifact_cache[$build_key]}"/*.zip; do
                  if [[ -f "$zip_file" ]]; then
                    target_name="ClassWidgets-Windows-${platform#windows-}_${run_id}.zip"
                    process_file "$zip_file" "$target_name" "$platform" "构建ZIP"
                    break
                  fi
                done
              fi
              # 处理 MSI 包（仅签名版本）
              if [[ -n "${artifact_cache[$msi_signed_key]:-}" ]]; then
                echo "[DEBUG] 使用 ${platform} 签名版本 MSI"
                for msi_file in "${artifact_cache[$msi_signed_key]}"/*.msi; do
                  if [[ -f "$msi_file" ]]; then
                    target_name="ClassWidgets-Windows-${platform#windows-}_${run_id}.msi"
                    process_file "$msi_file" "$target_name" "$platform" "已签名MSI"
                    break
                  fi
                done
              else
                echo "[DEBUG] ${platform} 跳过未签名的 MSI 文件"
              fi
            else
              # 非 Windows 平台：使用构建版本
              build_key="${platform}-build"
              if [[ -n "${artifact_cache[$build_key]:-}" ]]; then
                echo "[DEBUG] 使用 ${platform} 构建版本"
                for zip_file in "${artifact_cache[$build_key]}"/*.zip; do
                  if [[ -f "$zip_file" ]]; then
                    case "$platform_type" in
                      "macos")
                        target_name="ClassWidgets-Macos-${platform#macos-}_${run_id}.zip"
                        ;;
                      "linux")
                        target_name="ClassWidgets-Linux-${platform#linux-}_${run_id}.zip"
                        ;;
                    esac
                    process_file "$zip_file" "$target_name" "$platform" "构建"
                    break
                  fi
                done
              else
                echo "[DEBUG] ${platform} 版本未找到"
              fi
            fi
          done

          echo "package-count=$package_count" >> $GITHUB_OUTPUT
          if [[ $package_count -eq 0 ]]; then
            echo "[DEBUG] 没有找到任何包文件"
          fi

          echo "[DEBUG] 最终包列表:"
          ls -la final-packages/ || true

      - name: Calculate package properties
        shell: bash
        run: |
          {
            echo "构建时间: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo "构建ID: ${{ github.run_id }}"
            echo "提交: ${{ github.sha }}"
            echo ""
            echo "---"
            echo ""
            echo "## 包信息 (${{ steps.organize.outputs.package-count }}个文件)"
            echo ""
            echo "| 文件名 | 类型 | 大小(MB) | 大小(字节) | MD5 |"
            echo "|--------|------|----------|------------|-----|"
          } > final-packages/file-info.md
          shopt -s nullglob
          files=(final-packages/*.zip final-packages/*.msi)
          if [ ${#files[@]} -eq 0 ]; then
            echo "未找到任何包文件" >> final-packages/file-info.md
          else
            for package_file in "${files[@]}"; do
              if [[ -f "$package_file" ]]; then
                filename=$(basename "$package_file")
                file_extension="${filename##*.}"
                file_type=""
                case "$file_extension" in
                  "zip") file_type="ZIP包" ;;
                  "msi") file_type="MSI安装包" ;;
                  *) file_type="其他" ;;
                esac
                file_size=$(stat -c%s "$package_file" 2>/dev/null || wc -c < "$package_file" 2>/dev/null || echo "未知")
                file_md5=$(md5sum "$package_file" 2>/dev/null | cut -d' ' -f1 || echo "未知")
                file_size_mb=$(awk "BEGIN {printf \"%.2f\", $file_size / 1024 / 1024}" 2>/dev/null || echo "未知")
                echo "| $filename | $file_type | $file_size_mb | $file_size | \`$file_md5\` |" >> final-packages/file-info.md
              fi
            done
          fi
          echo "" >> final-packages/file-info.md
          cat final-packages/file-info.md >> $GITHUB_STEP_SUMMARY

      - name: Generate package provenance
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: "final-packages/*"
          bundle-path: final-packages/attestation.json

      - name: Upload final packages
        uses: actions/upload-artifact@v4
        with:
          name: ClassWidgets-Packages
          path: final-packages


  publish:
    name: Publish
    needs: [package]
    if: (startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_type == 'Release')) && needs.package.result == 'success' && needs.package.outputs.package-count > 0 && github.event_name != 'workflow_call'
    uses: ./.github/workflows/release.yml
    with:
      run_id: "${{ github.run_id }}"
      build_type: "Release"
      release_version: "${{ github.event.inputs.release_version }}"
    secrets: inherit
